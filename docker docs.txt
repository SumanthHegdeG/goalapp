Here’s a step-by-step guide to set up a `docker-compose.yml` file, including environment variables for MongoDB, backend, and frontend:

---

### **Steps to Configure Environment Variables**

#### 1. **Set Up MongoDB Environment Variables**
Create a file named `.env.mongodb` in the `env_file` folder with the following content:
```plaintext
MONGO_INITDB_ROOT_USERNAME=max
MONGO_INITDB_ROOT_PASSWORD=secret
MONGO_DB_NAME=my_database
```

#### 2. **Set Up Backend Environment Variables**
Create a file named `.env.backend` in the `env_file` folder with the following content:
```plaintext
DB_USERNAME=max
DB_PASSWORD=secret
DB_HOST=mongodb
DB_PORT=27017
DB_NAME=my_database
PORT=5000
JWT_SECRET=mysecretkey
```

#### 3. **Set Up Frontend Environment Variables**
Create a file named `.env.frontend` in the `env_file` folder with the following content:
```plaintext
REACT_APP_API_URL=http://localhost:5000/api
REACT_APP_ENV=development
```

---

### **Steps to Create `docker-compose.yml` File**

1. **Create a File**
   In your project root directory, create a file named `docker-compose.yml`.

2. **Add MongoDB Service**
   Define the MongoDB service, linking it with the `.env.mongodb` file for environment variables.

3. **Add Backend Service**
   Define the backend service, using the `.env.backend` file for environment variables. Link it with MongoDB using the service name.

4. **Add Frontend Service**
   Define the frontend service, using the `.env.frontend` file for environment variables, and map it to a specific port for local access.

---

### **Example `docker-compose.yml` File**
Here’s an example configuration:

```yaml
version: '3.8'

services:
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    env_file:
      - ./env_file/.env.mongodb
    volumes:
      - mongodb_data:/data/db

  backend:
    build:
      context: ./backend
    container_name: backend
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
    environment:
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
    env_file:
      - ./env_file/.env.backend

  frontend:
    build:
      context: ./frontend
    container_name: frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
      - REACT_APP_ENV=${REACT_APP_ENV}
    env_file:
      - ./env_file/.env.frontend

volumes:
  mongodb_data:
```

---

### **Steps to Run the Docker Compose Setup**

1. **Build and Start Containers**
   Run the following command in your terminal:
   ```bash
   docker-compose up --build
   ```

2. **Access Services**
   - MongoDB: Accessible at `localhost:27017`.
   - Backend: Accessible at `http://localhost:5000`.
   - Frontend: Accessible at `http://localhost:3000`.

3. **Verify Logs**
   Check the logs to ensure all services are running properly:
   ```bash
   docker-compose logs -f
   ```

Let me know if you'd like to dive deeper into any of these steps!